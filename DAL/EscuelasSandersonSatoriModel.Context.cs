//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sanderson.backend.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EscuelasSandersonSatoriEntities : DbContext
    {
        public EscuelasSandersonSatoriEntities()
            : base("name=EscuelasSandersonSatoriEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alumnos> Alumnos { get; set; }
        public virtual DbSet<AlumnosBecas> AlumnosBecas { get; set; }
        public virtual DbSet<AlumnosFutbol> AlumnosFutbol { get; set; }
        public virtual DbSet<AsistenciaPartidos> AsistenciaPartidos { get; set; }
        public virtual DbSet<Becas> Becas { get; set; }
        public virtual DbSet<CiclosEscolares> CiclosEscolares { get; set; }
        public virtual DbSet<ConceptosPago> ConceptosPago { get; set; }
        public virtual DbSet<CorteCajaGastos> CorteCajaGastos { get; set; }
        public virtual DbSet<CorteCajaIngresos> CorteCajaIngresos { get; set; }
        public virtual DbSet<CortesCaja> CortesCaja { get; set; }
        public virtual DbSet<EscuelaConceptosPago> EscuelaConceptosPago { get; set; }
        public virtual DbSet<Escuelas> Escuelas { get; set; }
        public virtual DbSet<EvidenciaGasto> EvidenciaGasto { get; set; }
        public virtual DbSet<Gastos> Gastos { get; set; }
        public virtual DbSet<Grados> Grados { get; set; }
        public virtual DbSet<HistorialPlanesPago> HistorialPlanesPago { get; set; }
        public virtual DbSet<HistorialRepitencias> HistorialRepitencias { get; set; }
        public virtual DbSet<InscripcionesTalleres> InscripcionesTalleres { get; set; }
        public virtual DbSet<NivelesEducativos> NivelesEducativos { get; set; }
        public virtual DbSet<Pagos> Pagos { get; set; }
        public virtual DbSet<ParametrosSistema> ParametrosSistema { get; set; }
        public virtual DbSet<PartidosFutbol> PartidosFutbol { get; set; }
        public virtual DbSet<Permisos> Permisos { get; set; }
        public virtual DbSet<PersonasAutorizadas> PersonasAutorizadas { get; set; }
        public virtual DbSet<RecargosConfig> RecargosConfig { get; set; }
        public virtual DbSet<ResumenDiario> ResumenDiario { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Talleres> Talleres { get; set; }
        public virtual DbSet<TiposGasto> TiposGasto { get; set; }
        public virtual DbSet<Tutores> Tutores { get; set; }
        public virtual DbSet<Uniformes> Uniformes { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<UsuariosEscuelas> UsuariosEscuelas { get; set; }
        public virtual DbSet<GastosNoRegistrados> GastosNoRegistrados { get; set; }
        public virtual DbSet<IngresosNoRegistrados> IngresosNoRegistrados { get; set; }
        public virtual DbSet<V_CorteCaja> V_CorteCaja { get; set; }
        public virtual DbSet<VAlumnos> VAlumnos { get; set; }
        public virtual DbSet<VistaEstadoCuenta> VistaEstadoCuenta { get; set; }
        public virtual DbSet<VistaPagosAlumno> VistaPagosAlumno { get; set; }
        public virtual DbSet<VistaPagosConRecargos> VistaPagosConRecargos { get; set; }
        public virtual DbSet<VNivelGrado> VNivelGrado { get; set; }
        public virtual DbSet<VW_AlumnosBecasActivas> VW_AlumnosBecasActivas { get; set; }
        public virtual DbSet<VW_CapitalActual> VW_CapitalActual { get; set; }
        public virtual DbSet<VW_ComparacionPlanesPago> VW_ComparacionPlanesPago { get; set; }
        public virtual DbSet<VW_DetalleIngresos> VW_DetalleIngresos { get; set; }
        public virtual DbSet<VW_ResumenCortes> VW_ResumenCortes { get; set; }
        public virtual DbSet<VW_SeguimientoCambiosCiclo> VW_SeguimientoCambiosCiclo { get; set; }
    
        public virtual ObjectResult<Nullable<System.Guid>> sp_RegistrarPago(Nullable<System.Guid> alumno_id, Nullable<System.Guid> concepto_id, Nullable<decimal> monto, Nullable<System.DateTime> fecha_aplicacion, string usuario_registro, string metodo_pago, Nullable<decimal> descuento, Nullable<System.Guid> beca_id, string observaciones, string referencia)
        {
            var alumno_idParameter = alumno_id.HasValue ?
                new ObjectParameter("alumno_id", alumno_id) :
                new ObjectParameter("alumno_id", typeof(System.Guid));
    
            var concepto_idParameter = concepto_id.HasValue ?
                new ObjectParameter("concepto_id", concepto_id) :
                new ObjectParameter("concepto_id", typeof(System.Guid));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("monto", monto) :
                new ObjectParameter("monto", typeof(decimal));
    
            var fecha_aplicacionParameter = fecha_aplicacion.HasValue ?
                new ObjectParameter("fecha_aplicacion", fecha_aplicacion) :
                new ObjectParameter("fecha_aplicacion", typeof(System.DateTime));
    
            var usuario_registroParameter = usuario_registro != null ?
                new ObjectParameter("usuario_registro", usuario_registro) :
                new ObjectParameter("usuario_registro", typeof(string));
    
            var metodo_pagoParameter = metodo_pago != null ?
                new ObjectParameter("metodo_pago", metodo_pago) :
                new ObjectParameter("metodo_pago", typeof(string));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(decimal));
    
            var beca_idParameter = beca_id.HasValue ?
                new ObjectParameter("beca_id", beca_id) :
                new ObjectParameter("beca_id", typeof(System.Guid));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("referencia", referencia) :
                new ObjectParameter("referencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("sp_RegistrarPago", alumno_idParameter, concepto_idParameter, montoParameter, fecha_aplicacionParameter, usuario_registroParameter, metodo_pagoParameter, descuentoParameter, beca_idParameter, observacionesParameter, referenciaParameter);
        }
    
        public virtual int sp_CambiarPlanPago(Nullable<System.Guid> alumno_id, string nuevo_plan, Nullable<int> mes_sin_pago, string usuario_registro)
        {
            var alumno_idParameter = alumno_id.HasValue ?
                new ObjectParameter("alumno_id", alumno_id) :
                new ObjectParameter("alumno_id", typeof(System.Guid));
    
            var nuevo_planParameter = nuevo_plan != null ?
                new ObjectParameter("nuevo_plan", nuevo_plan) :
                new ObjectParameter("nuevo_plan", typeof(string));
    
            var mes_sin_pagoParameter = mes_sin_pago.HasValue ?
                new ObjectParameter("mes_sin_pago", mes_sin_pago) :
                new ObjectParameter("mes_sin_pago", typeof(int));
    
            var usuario_registroParameter = usuario_registro != null ?
                new ObjectParameter("usuario_registro", usuario_registro) :
                new ObjectParameter("usuario_registro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CambiarPlanPago", alumno_idParameter, nuevo_planParameter, mes_sin_pagoParameter, usuario_registroParameter);
        }
    
        public virtual int sp_GenerarColegiaturasMensuales(Nullable<System.Guid> escuela_id, Nullable<int> anio, string usuario_registro)
        {
            var escuela_idParameter = escuela_id.HasValue ?
                new ObjectParameter("escuela_id", escuela_id) :
                new ObjectParameter("escuela_id", typeof(System.Guid));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            var usuario_registroParameter = usuario_registro != null ?
                new ObjectParameter("usuario_registro", usuario_registro) :
                new ObjectParameter("usuario_registro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GenerarColegiaturasMensuales", escuela_idParameter, anioParameter, usuario_registroParameter);
        }
    
        public virtual int sp_MarcarRepitencia(Nullable<System.Guid> alumno_id, string usuario_registro)
        {
            var alumno_idParameter = alumno_id.HasValue ?
                new ObjectParameter("alumno_id", alumno_id) :
                new ObjectParameter("alumno_id", typeof(System.Guid));
    
            var usuario_registroParameter = usuario_registro != null ?
                new ObjectParameter("usuario_registro", usuario_registro) :
                new ObjectParameter("usuario_registro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MarcarRepitencia", alumno_idParameter, usuario_registroParameter);
        }
    
        public virtual int sp_ProcesarCambioCiclo(string nuevo_ciclo, string usuario_registro)
        {
            var nuevo_cicloParameter = nuevo_ciclo != null ?
                new ObjectParameter("nuevo_ciclo", nuevo_ciclo) :
                new ObjectParameter("nuevo_ciclo", typeof(string));
    
            var usuario_registroParameter = usuario_registro != null ?
                new ObjectParameter("usuario_registro", usuario_registro) :
                new ObjectParameter("usuario_registro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProcesarCambioCiclo", nuevo_cicloParameter, usuario_registroParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
